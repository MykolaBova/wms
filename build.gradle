import groovy.transform.Memoized

buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
        mockitoVersion = '3.0.0'
        junitVersion = '5.3.1'
        testcontainersVersion = '1.12.0'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "io.franzbecker.gradle-lombok" version "3.1.0"
    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.silaev.wms'
version = '1.0.0'
sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
    mavenLocal()
}

lombok {
    version = "1.18.8"
}

springBoot {
    mainClassName = 'com.silaev.wms.WmsApplication'
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

ext['mockito.version'] = "${mockitoVersion}"

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.bouncycastle:bcprov-jdk15on:1.60')
    implementation('org.apache.poi:poi-ooxml:4.0.0')
    implementation('commons-io:commons-io:2.6')

    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.security:spring-security-test')

    testCompile("org.junit.jupiter:junit-jupiter-params:${junitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")

    testImplementation("com.github.silaev:mongodb-replica-set-extension:0.3.0")
    //testImplementation("com.silaev.junit-extension:mongodb-replica-set:0.3.0")
}

test {
    failFast = true
}

tasks.withType(Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.excludeTags 'integration-test'
    }
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task integrationTest(type: Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.includeTags 'integration-test'
    }
    task.systemProperties(
            System.properties.findAll {
                it.key.toString().startsWith("spring") ||
                        it.key.toString().startsWith("mongoReplicaSetProperties")
            }
    )
    if (!task.systemProperties.isEmpty()) {
        println("Detected test system properties: " + task.systemProperties)
    }

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    finalizedBy jacocoTestReport
}

wrapper {
    gradleVersion = '5.4.1'
    distributionType = Wrapper.DistributionType.ALL
}

jacoco {
    toolVersion = "0.8.4"
}

@Memoized
private static List<String> getSonarExclusions() {
    new File("sonar.exclude").readLines()
}

jacocoTestReport {
    executionData.from = fileTree(buildDir).include("/jacoco/*.exec")
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: getSonarExclusions())
        })
    }
}

jacocoTestCoverageVerification {
    executionData.from = fileTree(buildDir).include("/jacoco/*.exec")
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: getSonarExclusions())
        })
    }
}

check.dependsOn jacocoTestCoverageVerification