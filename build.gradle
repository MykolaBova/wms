import groovy.transform.Memoized

buildscript {
    ext {
        mockitoVersion = '3.3.3'
        junitVersion = '5.6.2'
        testcontainersVersion = '1.14.2'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id 'jacoco'
    id 'java'
    id 'idea'
}

group = 'com.silaev.wms'
version = '2.0.0'

repositories {
    mavenCentral()

    //maven { url 'https://repo.spring.io/milestone' }
    //maven { url 'https://repo.spring.io/snapshot' }

    //jcenter()

    //maven { url "https://jitpack.io" }

    //mavenLocal()
}

lombok {
    version = "1.18.12"
}

springBoot {
    mainClassName = 'com.silaev.wms.WmsApplication'
}

configurations.all {
    resolutionStrategy {
        // don't cache changing modules at all
        cacheChangingModulesFor 0, 'seconds'
    }
}

//ext['mongodb.version'] = "4.0.2"

dependencies {
    testImplementation(platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}"))
    testImplementation(platform("org.junit:junit-bom:${junitVersion}"))

    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.bouncycastle:bcprov-jdk15on:1.60')
    implementation('com.monitorjbl:xlsx-streamer:2.1.0')

    implementation('commons-io:commons-io:2.6')

    runtimeOnly('org.springframework.boot:spring-boot-devtools')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation('io.projectreactor:reactor-test')
    testImplementation('org.springframework.security:spring-security-test')

    testCompile("org.junit.jupiter:junit-jupiter-params")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")

    testCompile("org.testcontainers:mongodb")

    //for debug during the run-time
    implementation('io.projectreactor:reactor-tools:3.3.7.RELEASE')
}

tasks.withType(Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.excludeTags 'integration-test'
    }

    task.failFast = true

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task integrationTest(type: Test) { Test task ->
    task.useJUnitPlatform { JUnitPlatformOptions options ->
        options.includeTags 'integration-test'
    }
    task.systemProperties(
            System.properties.findAll {
                it.key.toString().startsWith("spring") ||
                        it.key.toString().startsWith("mongoReplicaSetProperties")
            }
    )
    if (!task.systemProperties.isEmpty()) {
        println("Detected test system properties: " + task.systemProperties)
    }

    task.failFast = true

    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'

    task.minHeapSize('512m')
    task.maxHeapSize('4g')

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
    finalizedBy jacocoTestReport
}

wrapper {
    gradleVersion = '6.3'
    distributionType = Wrapper.DistributionType.ALL
}

jacoco {
    toolVersion = "0.8.4"
}

@Memoized
private static List<String> getSonarExclusions() {
    new File("sonar.exclude").readLines()
}

jacocoTestReport {
    executionData.from = fileTree(buildDir).include("/jacoco/*.exec")
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: getSonarExclusions())
        })
    }
}

jacocoTestCoverageVerification {
    executionData.from = fileTree(buildDir).include("/jacoco/*.exec")
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
        }
    }

    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: getSonarExclusions())
        })
    }
}

compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

compileTestJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

check.dependsOn jacocoTestCoverageVerification